//
//  MergeChainCode.hpp
//  OpenTest
//
//  Created by Yun on 11/17/15.
//  Copyright Â© 2015 Yun. All rights reserved.
//

#ifndef MergeChainCode_hpp
#define MergeChainCode_hpp


#include "Invarible.hpp"
#include "GetChainCode.hpp"

struct sendData{
    Mat* src;
    int whichPiece;
    int row;
    int col;
    int sizeRow;
    int sizeCol;
    sendData(Mat* src,int whichPiece,int row,int col,int sizeRow,int sizeCol): src(src), whichPiece(whichPiece),row(row),col(col),sizeRow(sizeRow),sizeCol(sizeCol) {}
};


struct chain_code_split_piece;
struct chain_code_point{
    int x;
    int y;
    chain_code_split_piece* next;
    chain_code_point* nextPoint;
    chain_code_point* originalPoint;
    chain_code_point* lastConnectedPoint;
    chain_code_point* firstConnectedPoint;
    chain_code_point* corrspondPoint;
    int whichPiece;
    int chainIndex;
    int type;
    int cornerType;
    bool visited;
    bool visited2;
    bool goVisited;
    bool special;
    bool special2;
    bool inserted;
    bool reversed;
    chain_code_point(int xx,int yy, int whichPiece, int chainIndex,int type,int cornerType): x(xx),y(yy),visited(false), visited2(false),goVisited(false), special(false),whichPiece(whichPiece),chainIndex(chainIndex),next(NULL), nextPoint(NULL), originalPoint(NULL), lastConnectedPoint(NULL) ,firstConnectedPoint(NULL) ,type(type),corrspondPoint(NULL),special2(false),cornerType(cornerType),inserted(false),reversed(false) {}
};

struct chain_code_split_piece{
    vector<int> node;
    chain_code_point* next;
    chain_code_split_piece(vector<int> node): node(node) {}
};

struct chain_code_block{
    vector<vector<chain_code_point*>> border;
    vector<chain_code*> unbounded;
    vector<chain_code_point*> bounded;
    vector<chain_code_point*> begins;
    chain_code_point* topRight;
    chain_code_point* topLeft;
    chain_code_point* bottomRight;
    chain_code_point* bottomLeft;
    vector<int> status;
    chain_code_block(vector<int> s): topRight(NULL),topLeft(NULL),bottomRight(NULL),bottomLeft(NULL),status(s),border(vector<vector<chain_code_point*>>(4)) {};
};

vector<chain_code*> mergeChainCode(Mat& I);
#endif /* MergeChainCode_hpp */


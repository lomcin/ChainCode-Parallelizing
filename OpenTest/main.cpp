//
//  main.cpp
//  OpenTest
//
//  Created by Yun on 10/4/15.
//  Copyright Â© 2015 Yun. All rights reserved.
//



#include <iostream>

#include "GetChainCode.hpp"
#include "MergeChainCode.hpp"


int main(int argc, const char * argv[])
{

    Mat img = imread("/Users/yun/Documents/Capstone/images/803464-flower-field.jpg",CV_LOAD_IMAGE_GRAYSCALE);
    Mat I;
    threshold(img, I, THRESHOLDVALUE, 255, CV_THRESH_BINARY);
    
//    Mat I(9,18,CV_8UC(1),BACKGROUND);
//    for (int i=4; i<9; i++) {
//        for (int j=8-i; j<=i; j++) {
//            I.at<uchar>(j,i)=FOREGROUND;
//        }
//    }
//    for (int i=9; i<18; i++) {
//        for (int j=0; j<=8; j++) {
//            I.at<uchar>(j,i)=FOREGROUND;
//        }
//    }
//    I.at<uchar>(3,9)=BACKGROUND;
//    I.at<uchar>(4,9)=BACKGROUND;
//    I.at<uchar>(5,9)=BACKGROUND;
//    I.at<uchar>(6,9)=BACKGROUND;
//    I.at<uchar>(4,10)=BACKGROUND;
//    I.at<uchar>(5,10)=BACKGROUND;
//    I.at<uchar>(4,11)=BACKGROUND;
//    cout<<I<<endl<<endl;
    
    
    string window_name = "Origin Iamge";
    namedWindow( window_name, CV_WINDOW_AUTOSIZE );
    imshow( window_name,I);
    waitKey(0);

    vector<chain_code*> result= mergeChainCode(I);
    //printChainCode(result);
    Mat II= toImage(result,I.rows,I.cols);
    string window_name2 = "result Iamge";
    namedWindow( window_name2, CV_WINDOW_AUTOSIZE );
    imshow( window_name2,II);
    waitKey(0);

    vector<chain_code*> *vecc=extractChainCodes2(&I);
    //printChainCode(*vecc);
    Mat expect = toImage(*vecc, I.rows, I.cols);
    string window_name3 = "Expect Iamge";
    namedWindow( window_name3, CV_WINDOW_AUTOSIZE );
    imshow( window_name3,expect);
    waitKey(0);
    
    
    for(int i=0;i<I.rows;i++){
        for (int j=0; j<I.cols; j++) {
            if(expect.at<uchar>(i,j)!=II.at<uchar>(i,j)){
                cout<<"("<<i<<","<<j<<")--";
            }
        }
    }
    cout<<endl;
    
    return 0;
}
